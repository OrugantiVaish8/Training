Frontend
User interface where the users can see and interact with the application
Client side
Creating websites, designs, structure
JavaScript
It is a object based and object oriented programming language used to convert static page into dynamic page.
Static and Dynamic websites:
Static websites remains same to everyone (FB login)
Dynamic websites changes to everyone (Facebook data, Youtube data, Criczbuzz, Google maps)
Scripting language
Used to develop dynamic websites
Often used for form validations
Current version ‚ÄúES13‚Äù
Java script code is written inside the script tag
Two ways to run :
Using Browser
Using Node.js
Datatypes
It is a value used in programming language ,two types primitive and non primitive
Primitive datatype:
String, Number, Boolean, Undefined, Null, Symbol, and BigInt.
Non primitive datatype:
Object, Array, Function, RegExp
Variables
used to store value/data
dynamic in nature
no need to mention the datatype
3 types of variables (var, let, const)
Ctrl shift j ‚Äì console in browser
Break point 

Scope
global scope ‚Äì declare the variables outside the method and access inside the method
local scope/script scope ‚Äì declare the variables inside the method but cannot access outside 
block scope ‚Äì declare the variables inside {}

Ctrl shift j ‚Äì console in browser
Break point 
Debugging javascript
Website using html and css


Operators
It is a pre-defined symbol used to perform specific operation
Arithmetic Operators:
Operator
Description
+
Addition
-
Subtraction
*
Multiplication
**
Exponentiation (ES2016)
/
Division
%
Modulus (Division Remainder)
++
Increment
--
Decrement
















Increment:
Pre increment
Post increment
Assignment operator(short hand)
+=, -=, *=, /=, %=
Eg:  var c=10
        console.log(c)  //10
        c=c+10 ü°™c+=10

Logical operator
AND(&&)
OR(||)
NOT(!)
Relational operator
Gives output in Boolean format
<, <=, <, >=, ==, ===, !=
Check values not the datatype ü°™ ==
Checks both datatype and value ü°™ === (strictly equals to)
Console.log(5==5) //true
Console.log(5==‚Äô5‚Äô)//true
Console.log(5===5) //true
Console.log(5===‚Äù5‚Äù)//false
Ternary operator
It will accept three operands
Syntax:  (condition) ? true-statement : false-statement
Similar to if-else
Conditional statements
They are used to make some decision based on some condition
Simple if (only have true statement)
                   If(s<=10)
                   {
                   Console.log(‚Äúhello world‚Äù)
                    }
If-else (have true and false statement)
                   If(s<=10)
                   {
                   Console.log(‚Äúhello world‚Äù)
                   }else{
                  Console.log(‚Äúbye‚Äù)
                   }    
Else-if-else / else-if ladder
Let a=20
Let b=30
Let c=40
If(a>=b && a>=c)

Nested if
Let user=‚Äùadmin‚Äù
Let password=12345
If(user===‚Äùadmin‚Äù)
    {
    Console.log(‚Äúuservalid‚Äù)
    If (password===12345)
    {
        Console.log(‚Äúpassword valid‚Äù)
        Console.log(‚Äúlogin successful‚Äù)
    }else{
        Console.log(‚Äúpassword invalid‚Äù)
    }
}else{
    Console.log(‚Äúlogin unsucessfull‚Äù)
}

Switch case in js
let n=1
switch(n)
{
    case 1:
    {
        console.log("print i")
    }
    break;
    case 2:
    {
        console.log("print 2")
    }
    break;
    default:
    {
        console.log("invalid")
    }
}
If the case is monday and Tuesday print football
If the case is Wednesday and tusday print cricket
If the case is Friday print volleyball
If the case is Saturday print basketball
If the case is Sunday print holiday
The input should be given by the end user


let day = prompt("Enter the day of the week:").toLowerCase();

switch (day) {
    case "monday":
    case "tuesday":
        console.log("Football");
        break;
    case "wednesday":
    case "thursday":
        console.log("Cricket");
        break;
    case "friday":
        console.log("Volleyball");
        break;
    case "saturday":
        console.log("Basketball");
        break;
    case "sunday":
        console.log("Holiday");
        break;
    default:
        console.log("Invalid input. Please enter a valid day of the week.");
}


looping statement :
used to execute/iterate set of instructions based on conditions

while loop 
it will iterate set of instructions until the condition become false
by default 0 iteration
syntax
while(condition)
{
   set of instruction
}
Example
let i=1;
while(i <= 5){
    console.log(i);
    i++  //output --> 1 2 3 4 5
}

do while loop
it will execute first then it will check the condition
by default it will takes one iteration
syntax
do(
    set of instruction
 )while(condition)

Example 
let a=5;
do{
    console.log(a);
    a--;  //output --> 5 4 3 2 1 
}while(a >= 1)

for loop
three arguments
 1)initialization
 2)condition
 3)increment/decrement

syntax
for(initialization; Condition; increment/decrement){
     set of instruction
}

Example
for(let i=1; i<=5; i++){
    console.log(i);   //output --> 1 2 3 4 5
}




Functions in javaScript :
Functions are first citizens in java Script
Functions are object in javaScript

Types of functions
Function declaration statement/Named function/Pure function
Function expression
Function programming
Higher order function
Call back function
Arrow function
Nested function
IIFE( Immediate invoking function expression)
Function declaration statement:
It is a set of instruction or block of code used to perform specific task
Syntax:
function fun-name(parameters,......){
    set of instructions
}
fun-name(arguments,......)

Return keyword
It will stop execution of the function
Hoisting
We can call function before the function declaration



function ‚Äì keyword 
fun-name ‚Äì identifier 
parameters ‚Äì identifier
block{} ‚Äì local scope(cannot access outside the function
arguments ‚Äì data/values(data types)

Main Advantages
Code Reuseability(write once call multiple times)






Create a function of two numbers and the input should be taken from end user
nested function
function inside another function
by using this keyword used to access the global scope variable in local scope
we cannot access local scope variable using this keyword
lexical scope/scope chain
the ability of js engine search bar variable in local scope if it is not available it will start search in global scope
clouser
the binding of child function to the parent function
or it is the binding of child function lexical scope to the parent function we will call that as a closure
disadvantage of closure is memory wastage (whenever we call the child function multiple times, multiple times closure will be created in heap area it leads to memory wastage)
IIFE function
it will be called immediately once function object is created
syntax
(expression - function)()
Example
(function()
{
    console.log("hello)
})();
arrow function
(()=>{
    console.log("hello)
})()
array in javascript
it is used to store data of an different datatypes and it is heterogeneous in javaScript
two ways to create arrayin javaScript
let arr=[10,"hello",true,1n,Undefined]
console.log(arr);
objects in javascript
objects are used to store data in the form of key and value pair
two types to cereate object
declaration way
let obj={
    name:"abc",
    id:1,
    boolean:true,
    arr:[10,20,30],
    null:null,
    Undefined:undefined,
    demo:function(){
        console.log("hello)
    }
}
console.log(obj);
we can create object using constructor function
it is used to create object
function obj1(name,id){
    this.name=name;
    this .id-id;
}
let p1=new obj1("abc",1)
console.log(p1);
we cannot create constructor function using the arrow function

asynchronous function
making a way for other function to execute first
two methods
set timeout(cbf,delay time)
set interval(cbf,delay time)
prent inside window object
when the asynchronous function does not work promise will help the function

promise
it is an object
it is uesd to look after asynchronous function
it is having three phase
pending phase (we dont know whether the promise is resolve or reject)
either it will be resolved or reject
resolve or fullfill phase  (pass)
when asynchronous function working properly
then(cbf) method
reject phase  (fail)
when asynchronous fuction not working properly
catch(cbf) method

syntax for promise
new Promise((resolve,reject)=>{
    asynchronous function code
})
.then(cbf)
.catch(cbf)

online will check whether the device is connected to internet or not
isNaN is a method which checks the characters
promise chaining 
using multiple then methods
async and avoid it is a keyword used to avoid promise chaining
ajax asynchronous javascript and xml

bom(browser object model) having a root element window
window is having APIs 
screen API (screen size)
history API (history.go , history.back)
fetch API 
navigator API (takes all the devices/hardware)
navigation API (fetch current location)
storage API (local storage session storage)
DOM

DOM(document object model) 
dom contains root element document
html code is arranged in a tree structure inside the document
html is divided into two parts 
head (mata tag ,title tag)
body (all tags)
all the tags will be treated as a node

dom 
it is an object 
it is an API provided by window 
it is having a root element document
it is having life span: until page reloads
once the page has been reloaded the old dom is been distroyed and new dom is created
dom is used to create,update/modify,delete the element 
and we can provide style using dom

how to convert html structure into dom
document
html 
head (meta tag , title tag)
body (h1 tag(hello world),para tag(batch-6))

document 
html
head 
body
form
   label, input
div 
spam , div
         ol 
          it in 



if we target the element/tag using document directly (direct access)
indirectly (indirect acess)

in direct access methods in dom
document.getElementById("value")
document.getElementByClassName("value")
document.getElementByTagName("value")
document.getElementByName("value")
document.querySelector("value")
document.querySelectorAll("value")